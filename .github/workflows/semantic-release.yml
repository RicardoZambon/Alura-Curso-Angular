# This is a basic workflow to help you get started with Actions

name: Semantic-Release

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
  push:
    branches: [ master ]
jobs:
  #test:
  #  runs-on: ubuntu-latest
  #  strategy:
  #    matrix:
  #      # Run the steps below with the following versions of Node.js
  #      node-version: [10.x, 12.x, 14.x]
  #  steps:
  #    # Fetch the latest commit
  #    - name: Checkout
  #      uses: actions/checkout@v2
  #    # Setup Node.js using the appropriate version
  #    - name: Use Node.js ${{ matrix.node-version }}
  #      uses: actions/setup-node@v1
  #      with:
  #        node-version: ${{ matrix.node-version }}
  #    # Install package dependencies
  #    - name: Install
  #      run: npm ci
  #      working-directory: ./AluraPic
  #    # Run tests
  #    - name: Test
  #      run: npm test
  #      working-directory: ./AluraPic
  release:
    # Only release on push to master
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    #needs: [test]
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      #- name: Setup Node.js
      #  uses: actions/setup-node@v1
      #  with:
      #    node-version: 12.x

      - name: Install
        run: npm ci
        working-directory: ./AluraPic

      - name: Docker Build AluraPic
        run: docker build -t ricardozambon/alura-curso-angular-alurapic .
        working-directory: ./AluraPic

      - name: Docker Build API
        run: docker build -t ricardozambon/alura-curso-angular-api .
        working-directory: ./API

      - name: Release
        run: npx semantic-release
        working-directory: ./AluraPic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      
      - id: get_version
        name: Output version
        run: echo "::set-output name=version::${{ env.VERSION }}"
          

  docker_push:
    # Only runs after successfully generated the package version
    if: needs.release.outputs.version != ''
    runs-on: ubuntu-latest
    needs: [release]
    steps:
      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Push AluraPic to DockerHub
        run: |
          docker tag ricardozambon/alura-curso-angular-alurapic:latest ricardozambon/alura-curso-angular-alurapic:${{ needs.release.outputs.version }}
          docker push ricardozambon/alura-curso-angular-alurapic:${{ needs.release.outputs.version }}
          docker push ricardozambon/alura-curso-angular-alurapic:latest

      - name: Push API to DockerHub
        run: |
          docker tag ricardozambon/alura-curso-angular-api:latest ricardozambon/alura-curso-angular-api:${{ needs.release.outputs.version }}
          docker push ricardozambon/alura-curso-angular-api:${{ needs.release.outputs.version }}
          docker push ricardozambon/alura-curso-angular-api:latest
